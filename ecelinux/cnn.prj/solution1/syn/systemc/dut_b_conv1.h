// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __dut_b_conv1_H__
#define __dut_b_conv1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dut_b_conv1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dut_b_conv1_ram) {
        ram[0] = "0b00111101110111100101100101110000";
        ram[1] = "0b00111101110111011101100000001100";
        ram[2] = "0b00111110000001000001010011001000";
        ram[3] = "0b00111101110101101111011100101001";
        ram[4] = "0b00111110001100001001001110111010";
        ram[5] = "0b00111101111110111100010111111101";
        ram[6] = "0b00111101111010110110100001001001";
        ram[7] = "0b00111110000101010101111101111100";
        ram[8] = "0b00111110001011111001111110111101";
        ram[9] = "0b00111101111100100100000010111101";
        ram[10] = "0b00111101111111000100010011000011";
        ram[11] = "0b00111101110010110101010111010110";
        ram[12] = "0b00111110000000011101011110001101";
        ram[13] = "0b00111110000001011100001111101010";
        ram[14] = "0b00111101110101101100010100101010";
        ram[15] = "0b00111101101110110111001001110000";
        ram[16] = "0b00111101110100100011110110010000";
        ram[17] = "0b00111101111011101111101101010100";
        ram[18] = "0b00111101101110011101111110000001";
        ram[19] = "0b00111101111111001011010001110000";
        ram[20] = "0b00111110000001001010111111101100";
        ram[21] = "0b00111110000011110101101001001010";
        ram[22] = "0b00111101110110100001101010101110";
        ram[23] = "0b00111101111100011100010010000010";
        ram[24] = "0b00111101111001011101000000100011";
        ram[25] = "0b00111101110111001101100011111101";
        ram[26] = "0b00111110001011100100100011111000";
        ram[27] = "0b00111101111000000111001001111000";
        ram[28] = "0b00111101111111010100101111011101";
        ram[29] = "0b00111101110010110010001000111101";
        ram[30] = "0b00111110000110010001010110111001";
        ram[31] = "0b00111101110011011010101001111000";
        for (unsigned i = 32; i < 64 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dut_b_conv1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dut_b_conv1_ram* meminst;


SC_CTOR(dut_b_conv1) {
meminst = new dut_b_conv1_ram("dut_b_conv1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);


meminst->reset(reset);
meminst->clk(clk);
}
~dut_b_conv1() {
    delete meminst;
}


};//endmodule
#endif
