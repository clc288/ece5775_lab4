// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __dut_b_conv2_H__
#define __dut_b_conv2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dut_b_conv2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dut_b_conv2_ram) {
        ram[0] = "0b00111101110110101110100101101110";
        ram[1] = "0b00111101110110001001010111111010";
        ram[2] = "0b00111101110111011000111010100011";
        ram[3] = "0b00111101110010100001001101110000";
        ram[4] = "0b00111101110011111111010001100111";
        ram[5] = "0b00111101111000100111100001101011";
        ram[6] = "0b00111101101111100110100000010000";
        ram[7] = "0b00111101111001011111011000000001";
        ram[8] = "0b00111101110101000100111101100101";
        ram[9] = "0b00111101110011001001100000101000";
        ram[10] = "0b00111101111100100011101100101001";
        ram[11] = "0b00111101111001111000011110101111";
        ram[12] = "0b00111101110011101000101100101001";
        ram[13] = "0b00111101110100100111001110010110";
        ram[14] = "0b00111101111000000111100101101101";
        ram[15] = "0b00111101110000100000110110001111";
        ram[16] = "0b00111101110101000010111100001001";
        ram[17] = "0b00111101110100100100010011100111";
        ram[18] = "0b00111101110110011000100001000111";
        ram[19] = "0b00111101110100011100010011101100";
        ram[20] = "0b00111101111010101001000011001110";
        ram[21] = "0b00111101110111010111001101010000";
        ram[22] = "0b00111101111000011100000011101001";
        ram[23] = "0b00111101110010011100101001101100";
        ram[24] = "0b00111101110110010111011011111101";
        ram[25] = "0b00111101110111001101110100100110";
        ram[26] = "0b00111101110111010111110010111011";
        ram[27] = "0b00111101110010011100101100110011";
        ram[28] = "0b00111101110101101010000111110111";
        ram[29] = "0b00111101110100110010101101110000";
        ram[30] = "0b00111101111000101111100101111001";
        ram[31] = "0b00111101110011111000101000010011";
        ram[32] = "0b00111101110101110011100111011010";
        ram[33] = "0b00111101110100010111000001010000";
        ram[34] = "0b00111101111001110010001100110111";
        ram[35] = "0b00111101111000010001011101100100";
        ram[36] = "0b00111101110111011011010110011101";
        ram[37] = "0b00111101110011111010010110100011";
        ram[38] = "0b00111101110101000111000101101001";
        ram[39] = "0b00111101110111111010101111011011";
        ram[40] = "0b00111101111000000000101100101001";
        ram[41] = "0b00111101110011110011101000110001";
        ram[42] = "0b00111101110110110100011000010011";
        ram[43] = "0b00111101111011100000110010000011";
        ram[44] = "0b00111101110101001111010011111100";
        ram[45] = "0b00111101110110010011110111000010";
        ram[46] = "0b00111101110101101101100011000010";
        ram[47] = "0b00111101110101100111110010010001";
        ram[48] = "0b00111101101110011001111100101001";
        ram[49] = "0b00111101111000100000110100100100";
        ram[50] = "0b00111101110101110000001010011101";
        ram[51] = "0b00111101110010100111010101001001";
        ram[52] = "0b00111101110111000000110001110000";
        ram[53] = "0b00111101111010101111100000000011";
        ram[54] = "0b00111101111100011110000111101001";
        ram[55] = "0b00111101111000101011011110011101";
        ram[56] = "0b00111101110111011110111001110101";
        ram[57] = "0b00111101110111100101011011000001";
        ram[58] = "0b00111101110111011100111100001100";
        ram[59] = "0b00111101110011001100110011001101";
        ram[60] = "0b00111101111000111100011001110100";
        ram[61] = "0b00111101110101000111100100100110";
        ram[62] = "0b00111101110000101111011010110110";
        ram[63] = "0b00111101110000001111011110011110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dut_b_conv2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dut_b_conv2_ram* meminst;


SC_CTOR(dut_b_conv2) {
meminst = new dut_b_conv2_ram("dut_b_conv2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);


meminst->reset(reset);
meminst->clk(clk);
}
~dut_b_conv2() {
    delete meminst;
}


};//endmodule
#endif
