-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dut_perform_conv_w_conv1_rom is 
    generic(
             dwidth     : integer := 12; 
             awidth     : integer := 15; 
             mem_size    : integer := 18432
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dut_perform_conv_w_conv1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "110111101101", 1 => "001101000001", 2 => "001000011010", 
    3 => "000000100000", 4 => "110111111000", 5 => "001010011100", 
    6 => "111000100010", 7 => "111011101111", 8 => "000101011101", 
    9 => "000010111110", 10 => "000001000100", 11 => "110110111000", 
    12 => "001101110110", 13 => "001011100010", 14 => "000010001010", 
    15 => "110000010010", 16 => "000000111111", 17 => "110110011111", 
    18 => "110101010010", 19 => "110101011010", 20 => "111101001101", 
    21 => "000011011011", 22 => "001010001001", 23 => "000101101011", 
    24 => "110110001010", 25 => "111101111010", 26 => "001000110101", 
    27 => "000011111001", 28 => "000011110100", 29 => "000100001110", 
    30 => "000000110111", 31 => "000111101000", 32 => "110100101001", 
    33 => "001001101000", 34 => "000111000011", 35 => "110011000010", 
    36 => "110100110111", 37 => "000010110100", 38 => "111101110010", 
    39 => "000100011000", 40 => "101110011000", 41 => "110000011001", 
    42 => "111111001100", 43 => "111100010010", 44 => "000111111110", 
    45 => "000100101011", 46 => "111010000001", 47 => "001110110000", 
    48 => "111011010100", 49 => "000011000100", 50 => "111001110011", 
    51 => "000011001011", 52 => "000000011000", 53 => "000010100110", 
    54 => "110101000111", 55 => "000101011111", 56 => "110011100010", 
    57 => "111111100011", 58 => "000110101110", 59 => "111111000111", 
    60 => "110011111101", 61 => "001011000001", 62 => "111111111001", 
    63 => "110110011111", 64 => "111011011101", 65 => "110111010100", 
    66 => "110111011010", 67 => "111101000000", 68 => "000110110011", 
    69 => "001000111000", 70 => "000111011010", 71 => "000111000001", 
    72 => "110101000010", 73 => "110010011101", 74 => "111110110100", 
    75 => "000110001111", 76 => "000010111010", 77 => "110010001011", 
    78 => "111110110111", 79 => "000111010111", 80 => "110011010100", 
    81 => "000011000111", 82 => "000010101110", 83 => "111001101110", 
    84 => "000001000111", 85 => "110100010101", 86 => "000111110100", 
    87 => "000011000110", 88 => "101110011011", 89 => "000111010010", 
    90 => "000100110100", 91 => "111110110000", 92 => "111011101010", 
    93 => "000001110011", 94 => "110000010010", 95 => "111001010011", 
    96 => "000101100010", 97 => "000010111100", 98 => "001001000000", 
    99 => "111100011000", 100 => "000100110010", 101 => "000011001011", 
    102 => "111110010110", 103 => "000010100001", 104 => "110110010111", 
    105 => "111011111001", 106 => "000101000001", 107 => "000000000010", 
    108 => "000011000100", 109 => "111100011011", 110 => "000101001011", 
    111 => "000110000001", 112 => "110110111001", 113 => "111010110010", 
    114 => "000110101100", 115 => "101101111100", 116 => "111100101001", 
    117 => "000110110001", 118 => "000111000111", 119 => "000011011000", 
    120 => "110010001001", 121 to 122=> "000100100001", 123 => "101111110010", 
    124 => "110111010100", 125 => "110010000001", 126 => "001011000010", 
    127 => "000001111001", 128 => "110100011111", 129 => "001001011101", 
    130 => "111010111101", 131 => "111100010110", 132 => "111111110010", 
    133 => "001000000001", 134 => "000010001101", 135 => "001110100011", 
    136 => "111110000001", 137 => "000110101010", 138 => "000011011000", 
    139 => "000110100111", 140 => "000011011011", 141 => "000001010110", 
    142 => "111000100101", 143 => "000010011101", 144 => "000001011011", 
    145 => "110010001010", 146 => "111001100100", 147 => "000011101110", 
    148 => "001110100011", 149 => "000010011111", 150 => "111100101100", 
    151 => "000101011101", 152 => "111100010101", 153 => "000111111100", 
    154 => "001000101110", 155 => "110010111000", 156 => "000101010100", 
    157 => "111111100011", 158 => "110001011010", 159 => "111011110001", 
    160 => "111010001111", 161 => "000010001001", 162 => "001001011111", 
    163 => "000011111111", 164 => "001010000011", 165 => "001010111101", 
    166 => "110000001010", 167 => "111011111011", 168 => "111110011111", 
    169 => "001110100111", 170 => "111110100111", 171 => "000111011100", 
    172 => "000111111010", 173 => "110101110000", 174 => "111111101010", 
    175 => "111001101100", 176 => "001000001111", 177 => "111100111101", 
    178 => "111100101101", 179 => "001010110010", 180 => "000011111101", 
    181 => "000001001111", 182 => "000111000111", 183 => "000100100000", 
    184 => "000010110110", 185 => "111100111101", 186 => "111101001111", 
    187 => "110010000110", 188 => "111000000010", 189 => "000010101100", 
    190 => "000100100111", 191 => "101111010101", 192 => "000111111010", 
    193 => "110011111111", 194 => "111100110101", 195 => "000101100010", 
    196 => "111000001001", 197 => "000000101111", 198 => "001010001110", 
    199 => "110100101101", 200 => "000010000001", 201 => "001101110100", 
    202 => "111111111010", 203 => "111110011011", 204 => "000110111101", 
    205 => "111011011011", 206 => "111110101001", 207 => "000110000011", 
    208 => "001001011101", 209 => "001010000111", 210 => "111101011101", 
    211 => "001110000101", 212 => "111000110000", 213 => "111101010000", 
    214 => "111010010111", 215 => "000001011100", 216 => "000011111100", 
    217 => "000111010001", 218 => "001101101011", 219 => "111111110100", 
    220 => "111011001000", 221 => "111100010100", 222 => "111101100010", 
    223 => "111101100000", 224 => "110101010010", 225 => "000101010010", 
    226 => "000010110000", 227 => "111110101110", 228 => "110110111011", 
    229 => "111011001110", 230 => "001010111101", 231 => "111100111111", 
    232 => "001111100001", 233 => "111100100001", 234 => "111001010100", 
    235 => "110001000001", 236 => "111101011110", 237 => "111000000100", 
    238 => "000100001011", 239 => "111000010111", 240 => "111110111001", 
    241 => "001001000010", 242 => "110111101010", 243 => "111111000011", 
    244 => "111010001001", 245 => "001101000000", 246 => "111100011100", 
    247 => "001011001000", 248 => "111001101110", 249 => "111011101101", 
    250 => "001000110101", 251 => "000000010101", 252 => "111000110101", 
    253 => "101111001101", 254 => "111000101001", 255 => "001010101100", 
    256 => "000111011011", 257 => "111111100010", 258 => "000001110001", 
    259 => "001101110010", 260 => "000000100111", 261 => "111001111010", 
    262 => "000011001000", 263 => "000110110100", 264 => "110110010110", 
    265 => "001000000101", 266 => "000100111000", 267 => "111011001100", 
    268 => "001000001000", 269 => "000110111101", 270 => "110000011110", 
    271 => "110001100010", 272 => "000111011110", 273 => "000100110110", 
    274 => "111111010010", 275 => "000000100100", 276 => "000001000010", 
    277 => "000001000001", 278 => "000001110110", 279 => "000001010010", 
    280 => "000100110110", 281 => "000001010111", 282 => "000111010101", 
    283 => "000101011110", 284 => "111101011111", 285 => "111111010011", 
    286 => "000100101010", 287 => "110100000100", 288 to 18431=> "000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dut_perform_conv_w_conv1 is
    generic (
        DataWidth : INTEGER := 12;
        AddressRange : INTEGER := 18432;
        AddressWidth : INTEGER := 15);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dut_perform_conv_w_conv1 is
    component dut_perform_conv_w_conv1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dut_perform_conv_w_conv1_rom_U :  component dut_perform_conv_w_conv1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


