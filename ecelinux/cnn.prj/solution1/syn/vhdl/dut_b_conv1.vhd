-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dut_b_conv1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 6; 
             mem_size    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dut_b_conv1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110111100101100101110000", 
    1 => "00111101110111011101100000001100", 
    2 => "00111110000001000001010011001000", 
    3 => "00111101110101101111011100101001", 
    4 => "00111110001100001001001110111010", 
    5 => "00111101111110111100010111111101", 
    6 => "00111101111010110110100001001001", 
    7 => "00111110000101010101111101111100", 
    8 => "00111110001011111001111110111101", 
    9 => "00111101111100100100000010111101", 
    10 => "00111101111111000100010011000011", 
    11 => "00111101110010110101010111010110", 
    12 => "00111110000000011101011110001101", 
    13 => "00111110000001011100001111101010", 
    14 => "00111101110101101100010100101010", 
    15 => "00111101101110110111001001110000", 
    16 => "00111101110100100011110110010000", 
    17 => "00111101111011101111101101010100", 
    18 => "00111101101110011101111110000001", 
    19 => "00111101111111001011010001110000", 
    20 => "00111110000001001010111111101100", 
    21 => "00111110000011110101101001001010", 
    22 => "00111101110110100001101010101110", 
    23 => "00111101111100011100010010000010", 
    24 => "00111101111001011101000000100011", 
    25 => "00111101110111001101100011111101", 
    26 => "00111110001011100100100011111000", 
    27 => "00111101111000000111001001111000", 
    28 => "00111101111111010100101111011101", 
    29 => "00111101110010110010001000111101", 
    30 => "00111110000110010001010110111001", 
    31 => "00111101110011011010101001111000", 
    32 to 63=> "00000000000000000000000000000000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dut_b_conv1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dut_b_conv1 is
    component dut_b_conv1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dut_b_conv1_rom_U :  component dut_b_conv1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


