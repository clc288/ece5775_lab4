-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strm_in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    strm_in_V_V_empty_n : IN STD_LOGIC;
    strm_in_V_V_read : OUT STD_LOGIC;
    strm_out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    strm_out_V_V_full_n : IN STD_LOGIC;
    strm_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.412000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=136,HLS_SYN_DSP=8,HLS_SYN_FF=1451,HLS_SYN_LUT=2232}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_31 : BOOLEAN;
    signal w_conv1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_conv1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_conv2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_conv2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal strm_in_V_V_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_87 : BOOLEAN;
    signal strm_out_V_V_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_96 : BOOLEAN;
    signal tmp_V_2_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_102 : BOOLEAN;
    signal p_Result_s_fu_196_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Result_s_reg_280 : STD_LOGIC_VECTOR (48 downto 0);
    signal i_3_fu_213_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_3_reg_288 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_116 : BOOLEAN;
    signal exitcond1_i_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_i_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_131 : BOOLEAN;
    signal i_4_fu_242_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_reg_306 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_140 : BOOLEAN;
    signal tmp_30_i_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_i_reg_311 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_264_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_reg_324 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_156 : BOOLEAN;
    signal exitcond_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_conv1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mem_conv1_ce0 : STD_LOGIC;
    signal mem_conv1_we0 : STD_LOGIC;
    signal mem_conv1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mem_conv2_ce0 : STD_LOGIC;
    signal mem_conv2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V_assign_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_V_assign_ce0 : STD_LOGIC;
    signal output_V_assign_we0 : STD_LOGIC;
    signal output_V_assign_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V_assign_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_perform_conv_fu_168_ap_start : STD_LOGIC;
    signal grp_dut_perform_conv_fu_168_ap_done : STD_LOGIC;
    signal grp_dut_perform_conv_fu_168_ap_idle : STD_LOGIC;
    signal grp_dut_perform_conv_fu_168_ap_ready : STD_LOGIC;
    signal grp_dut_perform_conv_fu_168_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dut_perform_conv_fu_168_input_r_ce0 : STD_LOGIC;
    signal grp_dut_perform_conv_fu_168_input_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_perform_conv_fu_168_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dut_perform_conv_fu_168_output_r_ce0 : STD_LOGIC;
    signal grp_dut_perform_conv_fu_168_output_r_we0 : STD_LOGIC;
    signal grp_dut_perform_conv_fu_168_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_perform_conv_fu_168_output_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_perform_conv_fu_168_weight_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_dut_perform_conv_fu_168_weight_ce0 : STD_LOGIC;
    signal grp_dut_perform_conv_fu_168_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_perform_conv_fu_168_bias_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dut_perform_conv_fu_168_bias_ce0 : STD_LOGIC;
    signal grp_dut_perform_conv_fu_168_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_perform_conv_fu_168_M : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dut_perform_conv_fu_168_N : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dut_perform_conv_fu_168_O : STD_LOGIC_VECTOR (3 downto 0);
    signal bvh_d_index_reg_134 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_223 : BOOLEAN;
    signal i1_i_reg_146 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_233 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_243 : BOOLEAN;
    signal i_reg_157 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_grp_dut_perform_conv_fu_168_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_261 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_269 : BOOLEAN;
    signal tmp_29_i_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_189_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_192_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal index_assign_cast3_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_219_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component dut_perform_conv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        weight_ce0 : OUT STD_LOGIC;
        weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        M : IN STD_LOGIC_VECTOR (7 downto 0);
        N : IN STD_LOGIC_VECTOR (7 downto 0);
        O : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component dut_uitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_w_conv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_b_conv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_w_conv2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_b_conv2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mem_conv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_output_V_assign IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    w_conv1_U : component dut_w_conv1
    generic map (
        DataWidth => 32,
        AddressRange => 18432,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_dut_perform_conv_fu_168_weight_address0,
        ce0 => grp_dut_perform_conv_fu_168_weight_ce0,
        q0 => w_conv1_q0);

    b_conv1_U : component dut_b_conv1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_dut_perform_conv_fu_168_bias_address0,
        ce0 => grp_dut_perform_conv_fu_168_bias_ce0,
        q0 => b_conv1_q0);

    w_conv2_U : component dut_w_conv2
    generic map (
        DataWidth => 32,
        AddressRange => 18432,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_dut_perform_conv_fu_168_weight_address0,
        ce0 => grp_dut_perform_conv_fu_168_weight_ce0,
        q0 => w_conv2_q0);

    b_conv2_U : component dut_b_conv2
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_dut_perform_conv_fu_168_bias_address0,
        ce0 => grp_dut_perform_conv_fu_168_bias_ce0,
        q0 => b_conv2_q0);

    mem_conv1_U : component dut_mem_conv1
    generic map (
        DataWidth => 32,
        AddressRange => 800,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv1_address0,
        ce0 => mem_conv1_ce0,
        we0 => mem_conv1_we0,
        d0 => mem_conv1_d0,
        q0 => mem_conv1_q0);

    mem_conv2_U : component dut_mem_conv1
    generic map (
        DataWidth => 32,
        AddressRange => 800,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv2_address0,
        ce0 => mem_conv2_ce0,
        we0 => grp_dut_perform_conv_fu_168_output_r_we0,
        d0 => grp_dut_perform_conv_fu_168_output_r_d0,
        q0 => mem_conv2_q0);

    output_V_assign_U : component dut_output_V_assign
    generic map (
        DataWidth => 32,
        AddressRange => 576,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_V_assign_address0,
        ce0 => output_V_assign_ce0,
        we0 => output_V_assign_we0,
        d0 => output_V_assign_d0,
        q0 => output_V_assign_q0);

    grp_dut_perform_conv_fu_168 : component dut_perform_conv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_perform_conv_fu_168_ap_start,
        ap_done => grp_dut_perform_conv_fu_168_ap_done,
        ap_idle => grp_dut_perform_conv_fu_168_ap_idle,
        ap_ready => grp_dut_perform_conv_fu_168_ap_ready,
        input_r_address0 => grp_dut_perform_conv_fu_168_input_r_address0,
        input_r_ce0 => grp_dut_perform_conv_fu_168_input_r_ce0,
        input_r_q0 => grp_dut_perform_conv_fu_168_input_r_q0,
        output_r_address0 => grp_dut_perform_conv_fu_168_output_r_address0,
        output_r_ce0 => grp_dut_perform_conv_fu_168_output_r_ce0,
        output_r_we0 => grp_dut_perform_conv_fu_168_output_r_we0,
        output_r_d0 => grp_dut_perform_conv_fu_168_output_r_d0,
        output_r_q0 => grp_dut_perform_conv_fu_168_output_r_q0,
        weight_address0 => grp_dut_perform_conv_fu_168_weight_address0,
        weight_ce0 => grp_dut_perform_conv_fu_168_weight_ce0,
        weight_q0 => grp_dut_perform_conv_fu_168_weight_q0,
        bias_address0 => grp_dut_perform_conv_fu_168_bias_address0,
        bias_ce0 => grp_dut_perform_conv_fu_168_bias_ce0,
        bias_q0 => grp_dut_perform_conv_fu_168_bias_q0,
        M => grp_dut_perform_conv_fu_168_M,
        N => grp_dut_perform_conv_fu_168_N,
        O => grp_dut_perform_conv_fu_168_O);

    dut_uitofp_32ns_32_6_U11 : component dut_uitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_189_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_189_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_dut_perform_conv_fu_168_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_perform_conv_fu_168_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_i_fu_207_p2 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
                    ap_reg_grp_dut_perform_conv_fu_168_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_perform_conv_fu_168_ap_ready)) then 
                    ap_reg_grp_dut_perform_conv_fu_168_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bvh_d_index_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                bvh_d_index_reg_134 <= i_3_reg_288;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((strm_in_V_V_empty_n = ap_const_logic_0)))) then 
                bvh_d_index_reg_134 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i1_i_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                i1_i_reg_146 <= i_4_reg_306;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_logic_0 = grp_dut_perform_conv_fu_168_ap_done)))) then 
                i1_i_reg_146 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = exitcond_i_fu_236_p2)))) then 
                i_reg_157 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((strm_out_V_V_full_n = ap_const_logic_0)))) then 
                i_reg_157 <= i_2_reg_324;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                i_2_reg_324 <= i_2_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                i_3_reg_288 <= i_3_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                i_4_reg_306 <= i_4_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((strm_in_V_V_empty_n = ap_const_logic_0)))) then
                p_Result_s_reg_280 <= p_Result_s_fu_196_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_28_i_reg_298 <= grp_fu_189_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (ap_const_lv1_0 = exitcond_i_fu_236_p2))) then
                    tmp_30_i_reg_311(9 downto 0) <= tmp_30_i_fu_248_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_102))) then
                tmp_V_2_reg_275 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;
    tmp_30_i_reg_311(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, strm_in_V_V_empty_n, strm_out_V_V_full_n, ap_sig_102, exitcond1_i_fu_207_p2, exitcond_i_fu_236_p2, exitcond_fu_258_p2, grp_dut_perform_conv_fu_168_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_102)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((strm_in_V_V_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond1_i_fu_207_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_logic_0 = grp_dut_perform_conv_fu_168_ap_done))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                if (not((ap_const_logic_0 = grp_dut_perform_conv_fu_168_ap_done))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st13_fsm_12 => 
                if (not((ap_const_lv1_0 = exitcond_i_fu_236_p2))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st15_fsm_14 => 
                if (not((ap_const_lv1_0 = exitcond_fu_258_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st16_fsm_15 => 
                if (not((strm_out_V_V_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, exitcond_fu_258_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((ap_const_lv1_0 = exitcond_fu_258_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, exitcond_fu_258_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((ap_const_lv1_0 = exitcond_fu_258_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_102_assign_proc : process(ap_start, strm_in_V_V_empty_n)
    begin
                ap_sig_102 <= ((ap_start = ap_const_logic_0) or (strm_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_sig_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_116 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_131 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_140_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_140 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_156_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_156 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_223_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_223 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_233 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_243_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_243 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_261_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_261 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_269_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_269 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_31_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_31 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_87_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_87 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_96_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_96 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_269)
    begin
        if (ap_sig_269) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_261)
    begin
        if (ap_sig_261) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_233)
    begin
        if (ap_sig_233) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_140)
    begin
        if (ap_sig_140) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_243)
    begin
        if (ap_sig_243) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_156)
    begin
        if (ap_sig_156) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_96)
    begin
        if (ap_sig_96) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_31)
    begin
        if (ap_sig_31) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_87)
    begin
        if (ap_sig_87) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_116)
    begin
        if (ap_sig_116) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_131)
    begin
        if (ap_sig_131) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_223)
    begin
        if (ap_sig_223) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_fu_207_p2 <= "1" when (bvh_d_index_reg_134 = ap_const_lv6_31) else "0";
    exitcond_fu_258_p2 <= "1" when (i_reg_157 = ap_const_lv10_240) else "0";
    exitcond_i_fu_236_p2 <= "1" when (i1_i_reg_146 = ap_const_lv10_240) else "0";

    grp_dut_perform_conv_fu_168_M_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_dut_perform_conv_fu_168_M <= ap_const_lv8_20;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_dut_perform_conv_fu_168_M <= ap_const_lv8_1;
        else 
            grp_dut_perform_conv_fu_168_M <= "XXXXXXXX";
        end if; 
    end process;


    grp_dut_perform_conv_fu_168_N_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_dut_perform_conv_fu_168_N <= ap_const_lv8_40;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_dut_perform_conv_fu_168_N <= ap_const_lv8_20;
        else 
            grp_dut_perform_conv_fu_168_N <= "XXXXXXXX";
        end if; 
    end process;


    grp_dut_perform_conv_fu_168_O_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_dut_perform_conv_fu_168_O <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_dut_perform_conv_fu_168_O <= ap_const_lv4_5;
        else 
            grp_dut_perform_conv_fu_168_O <= "XXXX";
        end if; 
    end process;

    grp_dut_perform_conv_fu_168_ap_start <= ap_reg_grp_dut_perform_conv_fu_168_ap_start;

    grp_dut_perform_conv_fu_168_bias_q0_assign_proc : process(b_conv1_q0, b_conv2_q0, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_dut_perform_conv_fu_168_bias_q0 <= b_conv2_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_dut_perform_conv_fu_168_bias_q0 <= b_conv1_q0;
        else 
            grp_dut_perform_conv_fu_168_bias_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_dut_perform_conv_fu_168_input_r_q0_assign_proc : process(mem_conv1_q0, mem_conv2_q0, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_dut_perform_conv_fu_168_input_r_q0 <= mem_conv2_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_dut_perform_conv_fu_168_input_r_q0 <= mem_conv1_q0;
        else 
            grp_dut_perform_conv_fu_168_input_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_dut_perform_conv_fu_168_output_r_q0_assign_proc : process(mem_conv1_q0, mem_conv2_q0, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_dut_perform_conv_fu_168_output_r_q0 <= mem_conv1_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_dut_perform_conv_fu_168_output_r_q0 <= mem_conv2_q0;
        else 
            grp_dut_perform_conv_fu_168_output_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_dut_perform_conv_fu_168_weight_q0_assign_proc : process(w_conv1_q0, w_conv2_q0, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_dut_perform_conv_fu_168_weight_q0 <= w_conv2_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_dut_perform_conv_fu_168_weight_q0 <= w_conv1_q0;
        else 
            grp_dut_perform_conv_fu_168_weight_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_189_p0 <= std_logic_vector(resize(unsigned(tmp_18_fu_219_p3),32));
    i_2_fu_264_p2 <= std_logic_vector(unsigned(i_reg_157) + unsigned(ap_const_lv10_1));
    i_3_fu_213_p2 <= std_logic_vector(unsigned(bvh_d_index_reg_134) + unsigned(ap_const_lv6_1));
    i_4_fu_242_p2 <= std_logic_vector(unsigned(i1_i_reg_146) + unsigned(ap_const_lv10_1));
    index_assign_cast3_fu_203_p1 <= std_logic_vector(resize(unsigned(bvh_d_index_reg_134),32));

    mem_conv1_address0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, tmp_30_i_fu_248_p1, grp_dut_perform_conv_fu_168_input_r_address0, grp_dut_perform_conv_fu_168_output_r_address0, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st10_fsm_9, tmp_29_i_fu_231_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            mem_conv1_address0 <= tmp_29_i_fu_231_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            mem_conv1_address0 <= tmp_30_i_fu_248_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            mem_conv1_address0 <= grp_dut_perform_conv_fu_168_output_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            mem_conv1_address0 <= grp_dut_perform_conv_fu_168_input_r_address0;
        else 
            mem_conv1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    mem_conv1_ce0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, grp_dut_perform_conv_fu_168_input_r_ce0, grp_dut_perform_conv_fu_168_output_r_ce0, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            mem_conv1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            mem_conv1_ce0 <= grp_dut_perform_conv_fu_168_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            mem_conv1_ce0 <= grp_dut_perform_conv_fu_168_input_r_ce0;
        else 
            mem_conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv1_d0_assign_proc : process(tmp_28_i_reg_298, grp_dut_perform_conv_fu_168_output_r_d0, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            mem_conv1_d0 <= tmp_28_i_reg_298;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            mem_conv1_d0 <= grp_dut_perform_conv_fu_168_output_r_d0;
        else 
            mem_conv1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_conv1_we0_assign_proc : process(grp_dut_perform_conv_fu_168_output_r_we0, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            mem_conv1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            mem_conv1_we0 <= grp_dut_perform_conv_fu_168_output_r_we0;
        else 
            mem_conv1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_address0_assign_proc : process(grp_dut_perform_conv_fu_168_input_r_address0, grp_dut_perform_conv_fu_168_output_r_address0, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            mem_conv2_address0 <= grp_dut_perform_conv_fu_168_output_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            mem_conv2_address0 <= grp_dut_perform_conv_fu_168_input_r_address0;
        else 
            mem_conv2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    mem_conv2_ce0_assign_proc : process(grp_dut_perform_conv_fu_168_input_r_ce0, grp_dut_perform_conv_fu_168_output_r_ce0, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            mem_conv2_ce0 <= grp_dut_perform_conv_fu_168_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            mem_conv2_ce0 <= grp_dut_perform_conv_fu_168_input_r_ce0;
        else 
            mem_conv2_ce0 <= 'X';
        end if; 
    end process;


    output_V_assign_address0_assign_proc : process(tmp_30_i_reg_311, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st14_fsm_13, tmp_fu_270_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            output_V_assign_address0 <= tmp_30_i_reg_311(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            output_V_assign_address0 <= tmp_fu_270_p1(10 - 1 downto 0);
        else 
            output_V_assign_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_V_assign_ce0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            output_V_assign_ce0 <= ap_const_logic_1;
        else 
            output_V_assign_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_assign_d0 <= mem_conv1_q0;

    output_V_assign_we0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            output_V_assign_we0 <= ap_const_logic_1;
        else 
            output_V_assign_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_196_p3 <= (tmp_17_fu_192_p1 & tmp_V_2_reg_275);

    strm_in_V_V_blk_n_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, strm_in_V_V_empty_n, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1))) then 
            strm_in_V_V_blk_n <= strm_in_V_V_empty_n;
        else 
            strm_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_V_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, strm_in_V_V_empty_n, ap_sig_cseq_ST_st2_fsm_1, ap_sig_102)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_102)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((strm_in_V_V_empty_n = ap_const_logic_0))))) then 
            strm_in_V_V_read <= ap_const_logic_1;
        else 
            strm_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_out_V_V_blk_n_assign_proc : process(strm_out_V_V_full_n, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            strm_out_V_V_blk_n <= strm_out_V_V_full_n;
        else 
            strm_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    strm_out_V_V_din <= output_V_assign_q0;

    strm_out_V_V_write_assign_proc : process(strm_out_V_V_full_n, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((strm_out_V_V_full_n = ap_const_logic_0)))) then 
            strm_out_V_V_write <= ap_const_logic_1;
        else 
            strm_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_17_fu_192_p1 <= strm_in_V_V_dout(17 - 1 downto 0);
    tmp_18_fu_219_p3 <= p_Result_s_reg_280(to_integer(unsigned(index_assign_cast3_fu_203_p1)) downto to_integer(unsigned(index_assign_cast3_fu_203_p1))) when (to_integer(unsigned(index_assign_cast3_fu_203_p1))>= 0 and to_integer(unsigned(index_assign_cast3_fu_203_p1))<=48) else "-";
    tmp_29_i_fu_231_p1 <= std_logic_vector(resize(unsigned(bvh_d_index_reg_134),64));
    tmp_30_i_fu_248_p1 <= std_logic_vector(resize(unsigned(i1_i_reg_146),64));
    tmp_fu_270_p1 <= std_logic_vector(resize(unsigned(i_reg_157),64));
end behav;
