-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dut_b_conv2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 6; 
             mem_size    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dut_b_conv2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110110101110100101101110", 
    1 => "00111101110110001001010111111010", 
    2 => "00111101110111011000111010100011", 
    3 => "00111101110010100001001101110000", 
    4 => "00111101110011111111010001100111", 
    5 => "00111101111000100111100001101011", 
    6 => "00111101101111100110100000010000", 
    7 => "00111101111001011111011000000001", 
    8 => "00111101110101000100111101100101", 
    9 => "00111101110011001001100000101000", 
    10 => "00111101111100100011101100101001", 
    11 => "00111101111001111000011110101111", 
    12 => "00111101110011101000101100101001", 
    13 => "00111101110100100111001110010110", 
    14 => "00111101111000000111100101101101", 
    15 => "00111101110000100000110110001111", 
    16 => "00111101110101000010111100001001", 
    17 => "00111101110100100100010011100111", 
    18 => "00111101110110011000100001000111", 
    19 => "00111101110100011100010011101100", 
    20 => "00111101111010101001000011001110", 
    21 => "00111101110111010111001101010000", 
    22 => "00111101111000011100000011101001", 
    23 => "00111101110010011100101001101100", 
    24 => "00111101110110010111011011111101", 
    25 => "00111101110111001101110100100110", 
    26 => "00111101110111010111110010111011", 
    27 => "00111101110010011100101100110011", 
    28 => "00111101110101101010000111110111", 
    29 => "00111101110100110010101101110000", 
    30 => "00111101111000101111100101111001", 
    31 => "00111101110011111000101000010011", 
    32 => "00111101110101110011100111011010", 
    33 => "00111101110100010111000001010000", 
    34 => "00111101111001110010001100110111", 
    35 => "00111101111000010001011101100100", 
    36 => "00111101110111011011010110011101", 
    37 => "00111101110011111010010110100011", 
    38 => "00111101110101000111000101101001", 
    39 => "00111101110111111010101111011011", 
    40 => "00111101111000000000101100101001", 
    41 => "00111101110011110011101000110001", 
    42 => "00111101110110110100011000010011", 
    43 => "00111101111011100000110010000011", 
    44 => "00111101110101001111010011111100", 
    45 => "00111101110110010011110111000010", 
    46 => "00111101110101101101100011000010", 
    47 => "00111101110101100111110010010001", 
    48 => "00111101101110011001111100101001", 
    49 => "00111101111000100000110100100100", 
    50 => "00111101110101110000001010011101", 
    51 => "00111101110010100111010101001001", 
    52 => "00111101110111000000110001110000", 
    53 => "00111101111010101111100000000011", 
    54 => "00111101111100011110000111101001", 
    55 => "00111101111000101011011110011101", 
    56 => "00111101110111011110111001110101", 
    57 => "00111101110111100101011011000001", 
    58 => "00111101110111011100111100001100", 
    59 => "00111101110011001100110011001101", 
    60 => "00111101111000111100011001110100", 
    61 => "00111101110101000111100100100110", 
    62 => "00111101110000101111011010110110", 
    63 => "00111101110000001111011110011110" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dut_b_conv2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dut_b_conv2 is
    component dut_b_conv2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dut_b_conv2_rom_U :  component dut_b_conv2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


