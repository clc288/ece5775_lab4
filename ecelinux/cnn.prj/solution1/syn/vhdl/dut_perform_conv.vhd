-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_perform_conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    M : IN STD_LOGIC_VECTOR (7 downto 0);
    N : IN STD_LOGIC_VECTOR (7 downto 0);
    O : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of dut_perform_conv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv10_320 : STD_LOGIC_VECTOR (9 downto 0) := "1100100000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_48 : BOOLEAN;
    signal reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_88 : BOOLEAN;
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_95 : BOOLEAN;
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_105 : BOOLEAN;
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_112 : BOOLEAN;
    signal I_cast24_cast_fu_363_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal I_cast24_cast_reg_821 : STD_LOGIC_VECTOR (10 downto 0);
    signal I_cast_cast_fu_367_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_cast_cast_reg_826 : STD_LOGIC_VECTOR (7 downto 0);
    signal ofmap_size_fu_375_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ofmap_size_reg_831 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_fu_387_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_137 : BOOLEAN;
    signal tmp_4_fu_398_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_reg_844 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_401_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_reg_849 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_fu_404_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_reg_855 : STD_LOGIC_VECTOR (6 downto 0);
    signal O_cast4_fu_407_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal O_cast4_reg_860 : STD_LOGIC_VECTOR (6 downto 0);
    signal next_mul8_fu_410_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul8_reg_866 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_159 : BOOLEAN;
    signal next_mul3_fu_415_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul3_reg_871 : STD_LOGIC_VECTOR (10 downto 0);
    signal n_1_fu_429_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_1_reg_879 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_1_fu_452_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_1_reg_887 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_172 : BOOLEAN;
    signal tmp_8_fu_458_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_892 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_cast_fu_491_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_cast_reg_897 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_cast1_fu_495_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_cast1_reg_902 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_189 : BOOLEAN;
    signal x_1_fu_508_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_reg_911 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_mul_fu_514_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal next_mul_reg_916 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_200 : BOOLEAN;
    signal y_cast1_fu_519_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_cast1_reg_921 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_fu_532_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_2_reg_929 : STD_LOGIC_VECTOR (2 downto 0);
    signal output_addr_2_reg_934 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond3_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_cast_fu_558_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_cast_reg_939 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_218 : BOOLEAN;
    signal c_cast1_fu_562_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_cast1_reg_944 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_1_fu_572_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_1_reg_952 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_1_fu_592_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_1_reg_960 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_231 : BOOLEAN;
    signal tmp_fu_603_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_965 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index_fu_635_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_index_reg_970 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_643_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_reg_975 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_247 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_256 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_266 : BOOLEAN;
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_1000 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul1_fu_666_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul1_reg_1005 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_278 : BOOLEAN;
    signal n_2_fu_680_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_2_reg_1013 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_addr_reg_1018 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x2_cast9_fu_691_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal x2_cast9_reg_1023 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_295 : BOOLEAN;
    signal x_2_fu_704_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_2_reg_1031 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_1_fu_719_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_1_reg_1039 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_306 : BOOLEAN;
    signal next_mul2_fu_725_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal next_mul2_reg_1044 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_1_reg_1049 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_load_reg_1054 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_1_fu_792_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_1_reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_323 : BOOLEAN;
    signal i_reg_159 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_reg_170 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul2_reg_181 : STD_LOGIC_VECTOR (10 downto 0);
    signal phi_mul7_reg_193 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_reg_205 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_reg_216 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_reg_227 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_238 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_reg_249 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_reg_260 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_375 : BOOLEAN;
    signal n1_reg_271 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul1_reg_282 : STD_LOGIC_VECTOR (10 downto 0);
    signal x2_reg_294 : STD_LOGIC_VECTOR (2 downto 0);
    signal y3_reg_305 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_397 : BOOLEAN;
    signal phi_mul9_reg_316 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_415 : BOOLEAN;
    signal grp_fu_327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_431 : BOOLEAN;
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_438 : BOOLEAN;
    signal tmp_2_fu_353_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal I_fu_357_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ofmap_size_fu_375_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal O_cast2_fu_371_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ofmap_size_fu_375_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_cast_fu_420_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_cast_fu_443_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_458_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_458_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_cast1_fu_435_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_463_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_fu_473_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_cast1_fu_469_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_cast_fu_481_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp5_fu_485_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal x_cast_fu_499_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_cast_fu_523_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_cast_fu_538_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_542_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal o_index_fu_548_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_cast_fu_578_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_598_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_608_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_616_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_cast1_fu_582_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_620_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp6_fu_626_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp6_cast_fu_631_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_643_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp1_fu_643_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_648_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_index_fu_652_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal n1_cast_fu_671_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal x2_cast_fu_695_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal y3_cast_fu_710_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_cast_fu_730_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp7_fu_734_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_fu_740_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal biased_to_int_fu_750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_754_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_764_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp1_fu_643_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_458_p00 : STD_LOGIC_VECTOR (7 downto 0);

    component dut_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dut_fadd_32ns_32ns_32_5_full_dsp_U1 : component dut_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_342,
        din1 => grp_fu_327_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_327_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U2 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_r_q0,
        din1 => weight_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_331_p2);

    dut_fcmp_32ns_32ns_1_1_U3 : component dut_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_347,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_19_fu_337_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = exitcond1_fu_586_p2)))) then 
                c_reg_249 <= c_1_reg_952;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond3_fu_527_p2))) then 
                c_reg_249 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_fu_381_p2 = ap_const_lv1_0))) then 
                i_reg_159 <= i_1_fu_387_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_159 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    m_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = tmp_10_fu_503_p2))) then 
                m_reg_205 <= m_1_reg_887;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_3_fu_424_p2)))) then 
                m_reg_205 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    n1_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = tmp_11_fu_699_p2))) then 
                n1_reg_271 <= n_2_reg_1013;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_3_fu_424_p2))) then 
                n1_reg_271 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    n_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_6_fu_447_p2))) then 
                n_reg_170 <= n_1_reg_879;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_381_p2 = ap_const_lv1_0)))) then 
                n_reg_170 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = tmp_11_fu_699_p2))) then 
                phi_mul1_reg_282 <= next_mul1_reg_1005;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_3_fu_424_p2))) then 
                phi_mul1_reg_282 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    phi_mul2_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_6_fu_447_p2))) then 
                phi_mul2_reg_181 <= next_mul3_reg_871;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_381_p2 = ap_const_lv1_0)))) then 
                phi_mul2_reg_181 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    phi_mul7_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_6_fu_447_p2))) then 
                phi_mul7_reg_193 <= next_mul8_reg_866;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_381_p2 = ap_const_lv1_0)))) then 
                phi_mul7_reg_193 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    phi_mul9_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((ap_const_lv1_0 = tmp_11_fu_699_p2)))) then 
                phi_mul9_reg_316 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
                phi_mul9_reg_316 <= next_mul2_reg_1044;
            end if; 
        end if;
    end process;

    phi_mul_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond2_fu_566_p2)))) then 
                phi_mul_reg_238 <= next_mul_reg_916;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_10_fu_503_p2)))) then 
                phi_mul_reg_238 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    r_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = exitcond2_fu_566_p2))) then 
                r_reg_260 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                r_reg_260 <= r_1_reg_960;
            end if; 
        end if;
    end process;

    x2_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((ap_const_lv1_0 = exitcond_fu_714_p2)))) then 
                x2_reg_294 <= x_2_reg_1031;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = tmp_7_fu_675_p2)))) then 
                x2_reg_294 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    x_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond3_fu_527_p2)))) then 
                x_reg_216 <= x_1_reg_911;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_6_fu_447_p2)))) then 
                x_reg_216 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y3_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((ap_const_lv1_0 = tmp_11_fu_699_p2)))) then 
                y3_reg_305 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
                y3_reg_305 <= y_1_reg_1039;
            end if; 
        end if;
    end process;

    y_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond2_fu_566_p2)))) then 
                y_reg_227 <= y_2_reg_929;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_10_fu_503_p2)))) then 
                y_reg_227 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    I_cast24_cast_reg_821(2 downto 0) <= I_cast24_cast_fu_363_p1(2 downto 0);
                    I_cast_cast_reg_826(2 downto 0) <= I_cast_cast_fu_367_p1(2 downto 0);
                ofmap_size_reg_831 <= ofmap_size_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_381_p2 = ap_const_lv1_0)))) then
                    O_cast4_reg_860(3 downto 0) <= O_cast4_fu_407_p1(3 downto 0);
                tmp_12_reg_855 <= tmp_12_fu_404_p1;
                    tmp_4_reg_844(7 downto 0) <= tmp_4_fu_398_p1(7 downto 0);
                    tmp_5_reg_849(7 downto 0) <= tmp_5_fu_401_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = tmp_7_fu_675_p2)))) then
                bias_addr_reg_1018 <= tmp_s_fu_686_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then
                bias_load_reg_1054 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then
                biased_1_reg_1059 <= biased_1_fu_792_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                c_1_reg_952 <= c_1_fu_572_p2;
                    c_cast1_reg_944(1 downto 0) <= c_cast1_fu_562_p1(1 downto 0);
                    c_cast_reg_939(1 downto 0) <= c_cast_fu_558_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                m_1_reg_887 <= m_1_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                n_1_reg_879 <= n_1_fu_429_p2;
                next_mul3_reg_871 <= next_mul3_fu_415_p2;
                next_mul8_reg_866 <= next_mul8_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                n_2_reg_1013 <= n_2_fu_680_p2;
                next_mul1_reg_1005 <= next_mul1_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond_fu_714_p2))) then
                next_mul2_reg_1044 <= next_mul2_fu_725_p2;
                output_addr_1_reg_1049 <= tmp_14_fu_745_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                next_mul_reg_916 <= next_mul_fu_514_p2;
                y_2_reg_929 <= y_2_fu_532_p2;
                    y_cast1_reg_921(2 downto 0) <= y_cast1_fu_519_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond3_fu_527_p2))) then
                output_addr_2_reg_934 <= tmp_13_fu_553_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                r_1_reg_960 <= r_1_fu_592_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then
                reg_342 <= output_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28))) then
                reg_347 <= grp_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp1_reg_975 <= tmp1_fu_643_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_6_fu_447_p2)))) then
                    tmp5_cast_reg_897(14 downto 0) <= tmp5_cast_fu_491_p1(14 downto 0);
                tmp_8_reg_892 <= tmp_8_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                tmp_23_reg_1000 <= grp_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond1_fu_586_p2))) then
                tmp_reg_965 <= tmp_fu_603_p2;
                w_index_reg_970 <= w_index_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then
                    x2_cast9_reg_1023(2 downto 0) <= x2_cast9_fu_691_p1(2 downto 0);
                x_2_reg_1031 <= x_2_fu_704_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                x_1_reg_911 <= x_1_fu_508_p2;
                    x_cast1_reg_902(2 downto 0) <= x_cast1_fu_495_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then
                y_1_reg_1039 <= y_1_fu_719_p2;
            end if;
        end if;
    end process;
    I_cast24_cast_reg_821(10 downto 3) <= "00000000";
    I_cast_cast_reg_826(7 downto 3) <= "00000";
    tmp_4_reg_844(10 downto 8) <= "000";
    tmp_5_reg_849(10 downto 8) <= "000";
    O_cast4_reg_860(6 downto 4) <= "000";
    tmp5_cast_reg_897(15) <= '0';
    x_cast1_reg_902(10 downto 3) <= "00000000";
    y_cast1_reg_921(7 downto 3) <= "00000";
    c_cast_reg_939(4 downto 2) <= "000";
    c_cast1_reg_944(10 downto 2) <= "000000000";
    x2_cast9_reg_1023(10 downto 3) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond4_fu_381_p2, tmp_6_fu_447_p2, exitcond3_fu_527_p2, exitcond1_fu_586_p2, tmp_7_fu_675_p2, exitcond_fu_714_p2, tmp_3_fu_424_p2, tmp_10_fu_503_p2, exitcond2_fu_566_p2, tmp_11_fu_699_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond4_fu_381_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = tmp_3_fu_424_p2)) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = tmp_6_fu_447_p2))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = tmp_10_fu_503_p2))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st6_fsm_5 => 
                if ((ap_const_lv1_0 = exitcond3_fu_527_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st7_fsm_6 => 
                if ((ap_const_lv1_0 = exitcond2_fu_566_p2)) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st8_fsm_7 => 
                if ((ap_const_lv1_0 = exitcond1_fu_586_p2)) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st21_fsm_20 => 
                if ((ap_const_lv1_0 = tmp_7_fu_675_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st22_fsm_21 => 
                if (not((ap_const_lv1_0 = tmp_11_fu_699_p2))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when ap_ST_st23_fsm_22 => 
                if ((ap_const_lv1_0 = exitcond_fu_714_p2)) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    I_cast24_cast_fu_363_p1 <= std_logic_vector(resize(unsigned(I_fu_357_p2),11));
    I_cast_cast_fu_367_p1 <= std_logic_vector(resize(unsigned(I_fu_357_p2),8));
    I_fu_357_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(tmp_2_fu_353_p1));
    O_cast2_fu_371_p1 <= std_logic_vector(resize(unsigned(O),8));
    O_cast4_fu_407_p1 <= std_logic_vector(resize(unsigned(O),7));

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st21_fsm_20, tmp_7_fu_675_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and (ap_const_lv1_0 = tmp_7_fu_675_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, tmp_7_fu_675_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and (ap_const_lv1_0 = tmp_7_fu_675_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_105 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_112_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_112 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    ap_sig_137_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_137 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_159_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_159 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_172_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_172 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_189_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_189 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_200_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_200 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_218_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_218 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_231_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_231 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_247_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_247 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_256_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_256 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_266_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_266 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_278_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_278 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_295_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_295 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    ap_sig_306_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_306 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    ap_sig_323_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_323 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    ap_sig_375_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_375 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_397_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_397 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    ap_sig_415_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_415 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_431_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_431 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_438_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_438 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    ap_sig_48_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_48 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_88_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_88 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_95_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_95 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_256)
    begin
        if (ap_sig_256) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_266)
    begin
        if (ap_sig_266) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_415)
    begin
        if (ap_sig_415) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_88)
    begin
        if (ap_sig_88) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_431)
    begin
        if (ap_sig_431) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_105)
    begin
        if (ap_sig_105) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_48)
    begin
        if (ap_sig_48) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_375)
    begin
        if (ap_sig_375) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_278)
    begin
        if (ap_sig_278) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_295)
    begin
        if (ap_sig_295) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_306)
    begin
        if (ap_sig_306) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_95)
    begin
        if (ap_sig_95) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_438)
    begin
        if (ap_sig_438) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_112)
    begin
        if (ap_sig_112) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_137)
    begin
        if (ap_sig_137) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_323)
    begin
        if (ap_sig_323) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_397)
    begin
        if (ap_sig_397) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_159)
    begin
        if (ap_sig_159) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_172)
    begin
        if (ap_sig_172) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_189)
    begin
        if (ap_sig_189) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_200)
    begin
        if (ap_sig_200) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_218)
    begin
        if (ap_sig_218) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_231)
    begin
        if (ap_sig_231) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_247)
    begin
        if (ap_sig_247) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_1018;

    bias_ce0_assign_proc : process(ap_sig_cseq_ST_st23_fsm_22)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    biased_1_fu_792_p3 <= 
        reg_347 when (tmp_20_fu_786_p2(0) = '1') else 
        ap_const_lv32_0;
    biased_to_int_fu_750_p1 <= reg_347;
    c_1_fu_572_p2 <= std_logic_vector(unsigned(c_reg_249) + unsigned(ap_const_lv2_1));
    c_cast1_fu_562_p1 <= std_logic_vector(resize(unsigned(c_reg_249),11));
    c_cast_fu_558_p1 <= std_logic_vector(resize(unsigned(c_reg_249),5));
    exitcond1_fu_586_p2 <= "1" when (r_reg_260 = ap_const_lv2_3) else "0";
    exitcond2_fu_566_p2 <= "1" when (c_reg_249 = ap_const_lv2_3) else "0";
    exitcond3_fu_527_p2 <= "1" when (y_cast_fu_523_p1 = O) else "0";
    exitcond4_fu_381_p2 <= "1" when (i_reg_159 = ap_const_lv10_320) else "0";
    exitcond_fu_714_p2 <= "1" when (y3_cast_fu_710_p1 = O) else "0";

    grp_fu_327_p1_assign_proc : process(tmp_23_reg_1000, bias_load_reg_1054, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_327_p1 <= bias_load_reg_1054;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            grp_fu_327_p1 <= tmp_23_reg_1000;
        else 
            grp_fu_327_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_387_p2 <= std_logic_vector(unsigned(i_reg_159) + unsigned(ap_const_lv10_1));
    i_index_fu_652_p2 <= std_logic_vector(unsigned(x_cast1_reg_902) + unsigned(tmp4_fu_648_p2));
    index_fu_740_p2 <= std_logic_vector(unsigned(x2_cast9_reg_1023) + unsigned(tmp7_fu_734_p2));
    input_r_address0 <= tmp_21_fu_657_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_452_p2 <= std_logic_vector(unsigned(m_reg_205) + unsigned(ap_const_lv6_1));
    m_cast1_fu_435_p1 <= std_logic_vector(resize(unsigned(m_reg_205),11));
    m_cast_fu_443_p1 <= std_logic_vector(resize(unsigned(m_reg_205),7));
    n1_cast_fu_671_p1 <= std_logic_vector(resize(unsigned(n1_reg_271),8));
    n_1_fu_429_p2 <= std_logic_vector(unsigned(n_reg_170) + unsigned(ap_const_lv7_1));
    n_2_fu_680_p2 <= std_logic_vector(unsigned(n1_reg_271) + unsigned(ap_const_lv7_1));
    n_cast_fu_420_p1 <= std_logic_vector(resize(unsigned(n_reg_170),8));
    next_mul1_fu_666_p2 <= std_logic_vector(unsigned(phi_mul1_reg_282) + unsigned(tmp_5_reg_849));
    next_mul2_fu_725_p2 <= std_logic_vector(unsigned(O_cast4_reg_860) + unsigned(phi_mul9_reg_316));
    next_mul3_fu_415_p2 <= std_logic_vector(unsigned(phi_mul2_reg_181) + unsigned(tmp_4_reg_844));
    next_mul8_fu_410_p2 <= std_logic_vector(unsigned(phi_mul7_reg_193) + unsigned(tmp_5_reg_849));
    next_mul_fu_514_p2 <= std_logic_vector(unsigned(phi_mul_reg_238) + unsigned(O_cast4_reg_860));
    notlhs_fu_768_p2 <= "0" when (tmp_15_fu_754_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_774_p2 <= "1" when (tmp_16_fu_764_p1 = ap_const_lv23_0) else "0";
    o_index_fu_548_p2 <= std_logic_vector(unsigned(x_cast1_reg_902) + unsigned(tmp2_fu_542_p2));
    ofmap_size_fu_375_p0 <= O_cast2_fu_371_p1(4 - 1 downto 0);
    ofmap_size_fu_375_p1 <= O_cast2_fu_371_p1(4 - 1 downto 0);
    ofmap_size_fu_375_p2 <= std_logic_vector(resize(unsigned(ofmap_size_fu_375_p0) * unsigned(ofmap_size_fu_375_p1), 8));

    output_r_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, output_addr_2_reg_934, ap_sig_cseq_ST_st23_fsm_22, output_addr_1_reg_1049, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st31_fsm_30, tmp_1_fu_393_p1, tmp_14_fu_745_p1, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            output_r_address0 <= output_addr_1_reg_1049;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_r_address0 <= tmp_1_fu_393_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            output_r_address0 <= tmp_14_fu_745_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            output_r_address0 <= output_addr_2_reg_934;
        else 
            output_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(reg_347, ap_sig_cseq_ST_st2_fsm_1, biased_1_reg_1059, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st31_fsm_30)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            output_r_d0 <= biased_1_reg_1059;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            output_r_d0 <= reg_347;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_r_d0 <= ap_const_lv32_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_381_p2, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st31_fsm_30)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_fu_381_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_616_p1 <= std_logic_vector(resize(unsigned(p_shl1_fu_608_p3),5));
    p_shl1_fu_608_p3 <= (r_reg_260 & ap_const_lv2_0);
    p_shl_cast_fu_481_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_473_p3),15));
    p_shl_fu_473_p3 <= (tmp_9_fu_463_p2 & ap_const_lv3_0);
    r_1_fu_592_p2 <= std_logic_vector(unsigned(r_reg_260) + unsigned(ap_const_lv2_1));
    r_cast1_fu_582_p1 <= std_logic_vector(resize(unsigned(r_reg_260),5));
    r_cast_fu_578_p1 <= std_logic_vector(resize(unsigned(r_reg_260),8));
    tmp1_fu_643_p0 <= I_cast24_cast_reg_821(3 - 1 downto 0);
    tmp1_fu_643_p1 <= tmp1_fu_643_p10(8 - 1 downto 0);
    tmp1_fu_643_p10 <= std_logic_vector(resize(unsigned(tmp_reg_965),11));
    tmp1_fu_643_p2 <= std_logic_vector(resize(unsigned(tmp1_fu_643_p0) * unsigned(tmp1_fu_643_p1), 11));
    tmp2_fu_542_p2 <= std_logic_vector(unsigned(tmp_13_cast_fu_538_p1) + unsigned(phi_mul7_reg_193));
    tmp3_fu_598_p2 <= std_logic_vector(unsigned(r_cast_fu_578_p1) + unsigned(tmp_8_reg_892));
    tmp4_fu_648_p2 <= std_logic_vector(unsigned(tmp1_reg_975) + unsigned(c_cast1_reg_944));
    tmp5_cast_fu_491_p1 <= std_logic_vector(resize(unsigned(tmp5_fu_485_p2),16));
    tmp5_fu_485_p2 <= std_logic_vector(unsigned(tmp_9_cast1_fu_469_p1) + unsigned(p_shl_cast_fu_481_p1));
        tmp6_cast_fu_631_p1 <= std_logic_vector(resize(signed(tmp6_fu_626_p2),16));

    tmp6_fu_626_p2 <= std_logic_vector(unsigned(tmp_18_fu_620_p2) + unsigned(c_cast_reg_939));
    tmp7_fu_734_p2 <= std_logic_vector(unsigned(tmp_16_cast_fu_730_p1) + unsigned(phi_mul1_reg_282));
    tmp_10_fu_503_p2 <= "1" when (signed(x_cast_fu_499_p1) < signed(O)) else "0";
    tmp_11_fu_699_p2 <= "1" when (signed(x2_cast_fu_695_p1) < signed(O)) else "0";
    tmp_12_fu_404_p1 <= M(7 - 1 downto 0);
    tmp_13_cast_fu_538_p1 <= std_logic_vector(resize(unsigned(phi_mul_reg_238),11));
    tmp_13_fu_553_p1 <= std_logic_vector(resize(unsigned(o_index_fu_548_p2),64));
    tmp_14_fu_745_p1 <= std_logic_vector(resize(unsigned(index_fu_740_p2),64));
    tmp_15_fu_754_p4 <= biased_to_int_fu_750_p1(30 downto 23);
    tmp_16_cast_fu_730_p1 <= std_logic_vector(resize(unsigned(phi_mul9_reg_316),11));
    tmp_16_fu_764_p1 <= biased_to_int_fu_750_p1(23 - 1 downto 0);
    tmp_17_fu_780_p2 <= (notrhs_fu_774_p2 or notlhs_fu_768_p2);
    tmp_18_fu_620_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_616_p1) - unsigned(r_cast1_fu_582_p1));
    tmp_1_fu_393_p1 <= std_logic_vector(resize(unsigned(i_reg_159),64));
    tmp_20_fu_786_p2 <= (tmp_17_fu_780_p2 and tmp_19_fu_337_p2);
    tmp_21_fu_657_p1 <= std_logic_vector(resize(unsigned(i_index_fu_652_p2),64));
        tmp_22_fu_662_p1 <= std_logic_vector(resize(signed(w_index_reg_970),64));

    tmp_2_fu_353_p1 <= O(3 - 1 downto 0);
    tmp_3_fu_424_p2 <= "1" when (signed(n_cast_fu_420_p1) < signed(N)) else "0";
    tmp_4_fu_398_p1 <= std_logic_vector(resize(unsigned(M),11));
    tmp_5_fu_401_p1 <= std_logic_vector(resize(unsigned(ofmap_size_reg_831),11));
    tmp_6_fu_447_p2 <= "1" when (signed(m_cast_fu_443_p1) < signed(tmp_12_reg_855)) else "0";
    tmp_7_fu_675_p2 <= "1" when (signed(n1_cast_fu_671_p1) < signed(N)) else "0";
    tmp_8_fu_458_p0 <= tmp_8_fu_458_p00(6 - 1 downto 0);
    tmp_8_fu_458_p00 <= std_logic_vector(resize(unsigned(m_reg_205),8));
    tmp_8_fu_458_p1 <= I_cast_cast_reg_826(3 - 1 downto 0);
    tmp_8_fu_458_p2 <= std_logic_vector(resize(unsigned(tmp_8_fu_458_p0) * unsigned(tmp_8_fu_458_p1), 8));
    tmp_9_cast1_fu_469_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_463_p2),15));
    tmp_9_fu_463_p2 <= std_logic_vector(unsigned(m_cast1_fu_435_p1) + unsigned(phi_mul2_reg_181));
    tmp_fu_603_p2 <= std_logic_vector(unsigned(y_cast1_reg_921) + unsigned(tmp3_fu_598_p2));
    tmp_s_fu_686_p1 <= std_logic_vector(resize(unsigned(n1_reg_271),64));
    w_index_fu_635_p2 <= std_logic_vector(unsigned(tmp5_cast_reg_897) + unsigned(tmp6_cast_fu_631_p1));
    weight_address0 <= tmp_22_fu_662_p1(15 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x2_cast9_fu_691_p1 <= std_logic_vector(resize(unsigned(x2_reg_294),11));
    x2_cast_fu_695_p1 <= std_logic_vector(resize(unsigned(x2_reg_294),4));
    x_1_fu_508_p2 <= std_logic_vector(unsigned(x_reg_216) + unsigned(ap_const_lv3_1));
    x_2_fu_704_p2 <= std_logic_vector(unsigned(x2_reg_294) + unsigned(ap_const_lv3_1));
    x_cast1_fu_495_p1 <= std_logic_vector(resize(unsigned(x_reg_216),11));
    x_cast_fu_499_p1 <= std_logic_vector(resize(unsigned(x_reg_216),4));
    y3_cast_fu_710_p1 <= std_logic_vector(resize(unsigned(y3_reg_305),4));
    y_1_fu_719_p2 <= std_logic_vector(unsigned(y3_reg_305) + unsigned(ap_const_lv3_1));
    y_2_fu_532_p2 <= std_logic_vector(unsigned(y_reg_227) + unsigned(ap_const_lv3_1));
    y_cast1_fu_519_p1 <= std_logic_vector(resize(unsigned(y_reg_227),8));
    y_cast_fu_523_p1 <= std_logic_vector(resize(unsigned(y_reg_227),4));
end behav;
