

================================================================
== Vivado HLS Report for 'dut_perform_conv'
================================================================
* Date:           Thu Nov  2 22:46:56 2017

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        cnn.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      9.09|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-------+---------+-------+---------+---------+
    |     Latency     |     Interval    | Pipeline|
    |  min  |   max   |  min  |   max   |   Type  |
    +-------+---------+-------+---------+---------+
    |  17507|  2744675|  17507|  2744675|   none  |
    +-------+---------+-------+---------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------------------------+-------+---------+-------------+-----------+-----------+---------+----------+
        |                             |     Latency     |  Iteration  |  Initiation Interval  |   Trip  |          |
        |          Loop Name          |  min  |   max   |   Latency   |  achieved |   target  |  Count  | Pipelined|
        +-----------------------------+-------+---------+-------------+-----------+-----------+---------+----------+
        |- Loop 1                     |    800|      800|            1|          -|          -|      800|    no    |
        |- Loop 2                     |  15584|  2738304| 487 ~ 42786 |          -|          -| 32 ~ 64 |    no    |
        | + Loop 2.1                  |    485|    42784|  485 ~ 1337 |          -|          -|  1 ~ 32 |    no    |
        |  ++ Loop 2.1.1              |    483|     1335|  161 ~ 267  |          -|          -|  3 ~ 5  |    no    |
        |   +++ Loop 2.1.1.1          |    159|      265|           53|          -|          -|  3 ~ 5  |    no    |
        |    ++++ Loop 2.1.1.1.1      |     51|       51|           17|          -|          -|        3|    no    |
        |     +++++ Loop 2.1.1.1.1.1  |     15|       15|            5|          -|          -|        3|    no    |
        |- Loop 3                     |   1120|     5568|   35 ~ 87   |          -|          -| 32 ~ 64 |    no    |
        | + Loop 3.1                  |     33|       85|   11 ~ 17   |          -|          -|  3 ~ 5  |    no    |
        |  ++ Loop 3.1.1              |      9|       15|            3|          -|          -|  3 ~ 5  |    no    |
        +-----------------------------+-------+---------+-------------+-----------+-----------+---------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 17
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	2  / (!exitcond1)
	3  / (exitcond1)
3 --> 
	4  / (tmp_3)
	13  / (!tmp_3)
4 --> 
	3  / (!tmp_6)
	5  / (tmp_6)
5 --> 
	4  / (!tmp_10)
	6  / (tmp_10)
6 --> 
	5  / (exitcond2)
	7  / (!exitcond2)
7 --> 
	6  / (exitcond3)
	8  / (!exitcond3)
8 --> 
	7  / (exitcond4)
	9  / (!exitcond4)
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	8  / true
13 --> 
	14  / (tmp_7)
14 --> 
	13  / (!tmp_11)
	15  / (tmp_11)
15 --> 
	14  / (exitcond)
	16  / (!exitcond)
16 --> 
	17  / true
17 --> 
	15  / true
* FSM state operations: 

 <State 1>: 2.44ns
ST_1: O_read [1/1] 1.04ns
:0  %O_read = call i4 @_ssdm_op_Read.ap_auto.i4(i4 %O)

ST_1: N_read [1/1] 1.04ns
:1  %N_read = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %N)

ST_1: M_read [1/1] 1.04ns
:2  %M_read = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %M)

ST_1: tmp_2 [1/1] 0.00ns
:3  %tmp_2 = trunc i4 %O_read to i3

ST_1: I [1/1] 0.80ns
:4  %I = add i3 2, %tmp_2

ST_1: I_cast24_cast [1/1] 0.00ns
:5  %I_cast24_cast = zext i3 %I to i11

ST_1: I_cast_cast [1/1] 0.00ns
:6  %I_cast_cast = zext i3 %I to i8

ST_1: O_cast2 [1/1] 0.00ns
:7  %O_cast2 = zext i4 %O_read to i8

ST_1: ofmap_size [1/1] 1.40ns
:8  %ofmap_size = mul i8 %O_cast2, %O_cast2

ST_1: stg_27 [1/1] 1.57ns
:9  br label %1


 <State 2>: 2.71ns
ST_2: i [1/1] 0.00ns
:0  %i = phi i10 [ 0, %0 ], [ %i_1, %2 ]

ST_2: exitcond1 [1/1] 2.07ns
:1  %exitcond1 = icmp eq i10 %i, -224

ST_2: empty [1/1] 0.00ns
:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 800, i64 800, i64 800)

ST_2: i_1 [1/1] 1.84ns
:3  %i_1 = add i10 %i, 1

ST_2: stg_32 [1/1] 0.00ns
:4  br i1 %exitcond1, label %.preheader78.preheader, label %2

ST_2: tmp_1 [1/1] 0.00ns
:0  %tmp_1 = zext i10 %i to i64

ST_2: output_V_addr [1/1] 0.00ns
:1  %output_V_addr = getelementptr [800 x i16]* %output_V, i64 0, i64 %tmp_1

ST_2: stg_35 [1/1] 2.71ns
:2  store i16 0, i16* %output_V_addr, align 2

ST_2: stg_36 [1/1] 0.00ns
:3  br label %1

ST_2: tmp_4 [1/1] 0.00ns
.preheader78.preheader:0  %tmp_4 = zext i8 %M_read to i11

ST_2: tmp_5 [1/1] 0.00ns
.preheader78.preheader:1  %tmp_5 = zext i8 %ofmap_size to i11

ST_2: tmp_12 [1/1] 0.00ns
.preheader78.preheader:2  %tmp_12 = trunc i8 %M_read to i7

ST_2: O_cast4 [1/1] 0.00ns
.preheader78.preheader:3  %O_cast4 = zext i4 %O_read to i7

ST_2: stg_41 [1/1] 1.57ns
.preheader78.preheader:4  br label %.preheader78


 <State 3>: 3.57ns
ST_3: n [1/1] 0.00ns
.preheader78:0  %n = phi i7 [ 0, %.preheader78.preheader ], [ %n_1, %.preheader77 ]

ST_3: phi_mul2 [1/1] 0.00ns
.preheader78:1  %phi_mul2 = phi i11 [ 0, %.preheader78.preheader ], [ %next_mul3, %.preheader77 ]

ST_3: phi_mul7 [1/1] 0.00ns
.preheader78:2  %phi_mul7 = phi i11 [ 0, %.preheader78.preheader ], [ %next_mul8, %.preheader77 ]

ST_3: next_mul8 [1/1] 1.84ns
.preheader78:3  %next_mul8 = add i11 %phi_mul7, %tmp_5

ST_3: next_mul3 [1/1] 1.84ns
.preheader78:4  %next_mul3 = add i11 %phi_mul2, %tmp_4

ST_3: n_cast [1/1] 0.00ns
.preheader78:5  %n_cast = zext i7 %n to i8

ST_3: tmp_3 [1/1] 2.00ns
.preheader78:6  %tmp_3 = icmp slt i8 %n_cast, %N_read

ST_3: empty_11 [1/1] 0.00ns
.preheader78:7  %empty_11 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 64, i64 0)

ST_3: n_1 [1/1] 1.72ns
.preheader78:8  %n_1 = add i7 %n, 1

ST_3: stg_51 [1/1] 1.57ns
.preheader78:9  br i1 %tmp_3, label %.preheader77, label %.preheader72


 <State 4>: 6.38ns
ST_4: m [1/1] 0.00ns
.preheader77:0  %m = phi i6 [ 0, %.preheader78 ], [ %m_1, %.preheader76 ]

ST_4: m_cast1 [1/1] 0.00ns
.preheader77:1  %m_cast1 = zext i6 %m to i11

ST_4: m_cast21_cast [1/1] 0.00ns
.preheader77:2  %m_cast21_cast = zext i6 %m to i8

ST_4: m_cast [1/1] 0.00ns
.preheader77:3  %m_cast = zext i6 %m to i7

ST_4: tmp_6 [1/1] 1.97ns
.preheader77:4  %tmp_6 = icmp slt i7 %m_cast, %tmp_12

ST_4: empty_12 [1/1] 0.00ns
.preheader77:5  %empty_12 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 1, i64 32, i64 0)

ST_4: m_1 [1/1] 1.72ns
.preheader77:6  %m_1 = add i6 %m, 1

ST_4: stg_59 [1/1] 0.00ns
.preheader77:7  br i1 %tmp_6, label %.preheader76.preheader, label %.preheader78

ST_4: tmp_8 [1/1] 6.38ns
.preheader76.preheader:0  %tmp_8 = mul i8 %m_cast21_cast, %I_cast_cast

ST_4: tmp_9 [1/1] 1.84ns
.preheader76.preheader:1  %tmp_9 = add i11 %m_cast1, %phi_mul2

ST_4: tmp_9_cast1 [1/1] 0.00ns
.preheader76.preheader:2  %tmp_9_cast1 = zext i11 %tmp_9 to i15

ST_4: p_shl [1/1] 0.00ns
.preheader76.preheader:3  %p_shl = call i14 @_ssdm_op_BitConcatenate.i14.i11.i3(i11 %tmp_9, i3 0)

ST_4: p_shl_cast [1/1] 0.00ns
.preheader76.preheader:4  %p_shl_cast = zext i14 %p_shl to i15

ST_4: tmp5 [1/1] 1.96ns
.preheader76.preheader:5  %tmp5 = add i15 %tmp_9_cast1, %p_shl_cast

ST_4: tmp5_cast [1/1] 0.00ns
.preheader76.preheader:6  %tmp5_cast = zext i15 %tmp5 to i16

ST_4: stg_67 [1/1] 1.57ns
.preheader76.preheader:7  br label %.preheader76


 <State 5>: 3.45ns
ST_5: x [1/1] 0.00ns
.preheader76:0  %x = phi i3 [ 0, %.preheader76.preheader ], [ %x_1, %.preheader75 ]

ST_5: x_cast1 [1/1] 0.00ns
.preheader76:1  %x_cast1 = zext i3 %x to i11

ST_5: x_cast [1/1] 0.00ns
.preheader76:2  %x_cast = zext i3 %x to i4

ST_5: tmp_10 [1/1] 1.88ns
.preheader76:3  %tmp_10 = icmp slt i4 %x_cast, %O_read

ST_5: empty_13 [1/1] 0.00ns
.preheader76:4  %empty_13 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 3, i64 5, i64 0)

ST_5: x_1 [1/1] 0.80ns
.preheader76:5  %x_1 = add i3 %x, 1

ST_5: stg_74 [1/1] 1.57ns
.preheader76:6  br i1 %tmp_10, label %.preheader75, label %.preheader77


 <State 6>: 2.74ns
ST_6: y [1/1] 0.00ns
.preheader75:0  %y = phi i3 [ 0, %.preheader76 ], [ %y_1, %.preheader74 ]

ST_6: phi_mul [1/1] 0.00ns
.preheader75:1  %phi_mul = phi i7 [ 0, %.preheader76 ], [ %next_mul, %.preheader74 ]

ST_6: next_mul [1/1] 1.72ns
.preheader75:2  %next_mul = add i7 %phi_mul, %O_cast4

ST_6: y_cast1 [1/1] 0.00ns
.preheader75:3  %y_cast1 = zext i3 %y to i8

ST_6: y_cast [1/1] 0.00ns
.preheader75:4  %y_cast = zext i3 %y to i4

ST_6: exitcond2 [1/1] 1.88ns
.preheader75:5  %exitcond2 = icmp eq i4 %y_cast, %O_read

ST_6: empty_14 [1/1] 0.00ns
.preheader75:6  %empty_14 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 3, i64 5, i64 0)

ST_6: y_1 [1/1] 0.80ns
.preheader75:7  %y_1 = add i3 %y, 1

ST_6: stg_83 [1/1] 0.00ns
.preheader75:8  br i1 %exitcond2, label %.preheader76, label %.preheader74.preheader

ST_6: tmp_13_cast [1/1] 0.00ns
.preheader74.preheader:0  %tmp_13_cast = zext i7 %phi_mul to i11

ST_6: tmp2 [1/1] 1.37ns
.preheader74.preheader:1  %tmp2 = add i11 %tmp_13_cast, %phi_mul7

ST_6: o_index [1/1] 1.37ns
.preheader74.preheader:2  %o_index = add i11 %x_cast1, %tmp2

ST_6: tmp_13 [1/1] 0.00ns
.preheader74.preheader:3  %tmp_13 = zext i11 %o_index to i64

ST_6: output_V_addr_2 [1/1] 0.00ns
.preheader74.preheader:4  %output_V_addr_2 = getelementptr [800 x i16]* %output_V, i64 0, i64 %tmp_13

ST_6: stg_89 [1/1] 1.57ns
.preheader74.preheader:5  br label %.preheader74


 <State 7>: 2.93ns
ST_7: c [1/1] 0.00ns
.preheader74:0  %c = phi i2 [ 0, %.preheader74.preheader ], [ %c_1, %.preheader73 ]

ST_7: c_cast [1/1] 0.00ns
.preheader74:1  %c_cast = zext i2 %c to i5

ST_7: c_cast1 [1/1] 0.00ns
.preheader74:2  %c_cast1 = zext i2 %c to i11

ST_7: exitcond3 [1/1] 1.36ns
.preheader74:3  %exitcond3 = icmp eq i2 %c, -1

ST_7: empty_15 [1/1] 0.00ns
.preheader74:4  %empty_15 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 3, i64 3, i64 3)

ST_7: c_1 [1/1] 0.80ns
.preheader74:5  %c_1 = add i2 %c, 1

ST_7: stg_96 [1/1] 1.57ns
.preheader74:6  br i1 %exitcond3, label %.preheader75, label %.preheader73


 <State 8>: 4.58ns
ST_8: r [1/1] 0.00ns
.preheader73:0  %r = phi i2 [ %r_1, %3 ], [ 0, %.preheader74 ]

ST_8: r_cast [1/1] 0.00ns
.preheader73:1  %r_cast = zext i2 %r to i8

ST_8: r_cast1 [1/1] 0.00ns
.preheader73:2  %r_cast1 = zext i2 %r to i5

ST_8: exitcond4 [1/1] 1.36ns
.preheader73:3  %exitcond4 = icmp eq i2 %r, -1

ST_8: empty_16 [1/1] 0.00ns
.preheader73:4  %empty_16 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 3, i64 3, i64 3)

ST_8: r_1 [1/1] 0.80ns
.preheader73:5  %r_1 = add i2 %r, 1

ST_8: stg_103 [1/1] 0.00ns
.preheader73:6  br i1 %exitcond4, label %.preheader74, label %3

ST_8: tmp3 [1/1] 1.31ns
:0  %tmp3 = add i8 %r_cast, %tmp_8

ST_8: tmp [1/1] 1.31ns
:1  %tmp = add i8 %y_cast1, %tmp3

ST_8: p_shl1 [1/1] 0.00ns
:6  %p_shl1 = call i4 @_ssdm_op_BitConcatenate.i4.i2.i2(i2 %r, i2 0)

ST_8: p_shl1_cast [1/1] 0.00ns
:7  %p_shl1_cast = zext i4 %p_shl1 to i5

ST_8: tmp_17 [1/1] 1.31ns
:8  %tmp_17 = sub i5 %p_shl1_cast, %r_cast1

ST_8: tmp6 [1/1] 1.31ns
:9  %tmp6 = add i5 %tmp_17, %c_cast

ST_8: tmp6_cast [1/1] 0.00ns
:10  %tmp6_cast = sext i5 %tmp6 to i16

ST_8: w_index [1/1] 1.96ns
:11  %w_index = add i16 %tmp5_cast, %tmp6_cast


 <State 9>: 6.38ns
ST_9: tmp_cast_cast [1/1] 0.00ns
:2  %tmp_cast_cast = zext i8 %tmp to i11

ST_9: tmp1 [1/1] 6.38ns
:3  %tmp1 = mul i11 %I_cast24_cast, %tmp_cast_cast


 <State 10>: 5.45ns
ST_10: tmp4 [1/1] 1.37ns
:4  %tmp4 = add i11 %tmp1, %c_cast1

ST_10: i_index [1/1] 1.37ns
:5  %i_index = add i11 %x_cast1, %tmp4

ST_10: tmp_18 [1/1] 0.00ns
:12  %tmp_18 = zext i11 %i_index to i64

ST_10: tmp_19 [1/1] 0.00ns
:13  %tmp_19 = sext i16 %w_index to i64

ST_10: input_V_addr [1/1] 0.00ns
:14  %input_V_addr = getelementptr [800 x i16]* %input_V, i64 0, i64 %tmp_18

ST_10: input_V_load [2/2] 2.71ns
:15  %input_V_load = load i16* %input_V_addr, align 2

ST_10: weight_V_addr [1/1] 0.00ns
:17  %weight_V_addr = getelementptr [18432 x i16]* %weight_V, i64 0, i64 %tmp_19

ST_10: weight_V_load [2/2] 2.71ns
:18  %weight_V_load = load i16* %weight_V_addr, align 2


 <State 11>: 2.71ns
ST_11: input_V_load [1/2] 2.71ns
:15  %input_V_load = load i16* %input_V_addr, align 2

ST_11: weight_V_load [1/2] 2.71ns
:18  %weight_V_load = load i16* %weight_V_addr, align 2

ST_11: p_Val2_3 [2/2] 2.71ns
:21  %p_Val2_3 = load i16* %output_V_addr_2, align 2


 <State 12>: 9.09ns
ST_12: OP1_V [1/1] 0.00ns
:16  %OP1_V = sext i16 %input_V_load to i30

ST_12: OP2_V [1/1] 0.00ns
:19  %OP2_V = sext i16 %weight_V_load to i30

ST_12: p_Val2_4 [1/1] 3.36ns
:20  %p_Val2_4 = mul i30 %OP1_V, %OP2_V

ST_12: p_Val2_3 [1/2] 2.71ns
:21  %p_Val2_3 = load i16* %output_V_addr_2, align 2

ST_12: tmp_20 [1/1] 0.00ns
:22  %tmp_20 = call i30 @_ssdm_op_BitConcatenate.i30.i16.i14(i16 %p_Val2_3, i14 0)

ST_12: p_Val2_5 [1/1] 3.02ns
:23  %p_Val2_5 = add i30 %p_Val2_4, %tmp_20

ST_12: tmp_21 [1/1] 0.00ns
:24  %tmp_21 = call i16 @_ssdm_op_PartSelect.i16.i30.i32.i32(i30 %p_Val2_5, i32 14, i32 29)

ST_12: stg_132 [1/1] 2.71ns
:25  store i16 %tmp_21, i16* %output_V_addr_2, align 2

ST_12: stg_133 [1/1] 0.00ns
:26  br label %.preheader73


 <State 13>: 2.00ns
ST_13: n1 [1/1] 0.00ns
.preheader72:0  %n1 = phi i7 [ 0, %.preheader78 ], [ %n_2, %.preheader71 ]

ST_13: phi_mul1 [1/1] 0.00ns
.preheader72:1  %phi_mul1 = phi i11 [ 0, %.preheader78 ], [ %next_mul1, %.preheader71 ]

ST_13: next_mul1 [1/1] 1.84ns
.preheader72:2  %next_mul1 = add i11 %phi_mul1, %tmp_5

ST_13: n1_cast [1/1] 0.00ns
.preheader72:3  %n1_cast = zext i7 %n1 to i8

ST_13: tmp_7 [1/1] 2.00ns
.preheader72:4  %tmp_7 = icmp slt i8 %n1_cast, %N_read

ST_13: empty_17 [1/1] 0.00ns
.preheader72:5  %empty_17 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 64, i64 0)

ST_13: n_2 [1/1] 1.72ns
.preheader72:6  %n_2 = add i7 %n1, 1

ST_13: stg_141 [1/1] 0.00ns
.preheader72:7  br i1 %tmp_7, label %.preheader71.preheader, label %5

ST_13: tmp_s [1/1] 0.00ns
.preheader71.preheader:0  %tmp_s = zext i7 %n1 to i64

ST_13: bias_V_addr [1/1] 0.00ns
.preheader71.preheader:1  %bias_V_addr = getelementptr [64 x i16]* %bias_V, i64 0, i64 %tmp_s

ST_13: stg_144 [1/1] 1.57ns
.preheader71.preheader:2  br label %.preheader71

ST_13: stg_145 [1/1] 0.00ns
:0  ret void


 <State 14>: 3.45ns
ST_14: x2 [1/1] 0.00ns
.preheader71:0  %x2 = phi i3 [ 0, %.preheader71.preheader ], [ %x_2, %.preheader ]

ST_14: x2_cast9 [1/1] 0.00ns
.preheader71:1  %x2_cast9 = zext i3 %x2 to i11

ST_14: x2_cast [1/1] 0.00ns
.preheader71:2  %x2_cast = zext i3 %x2 to i4

ST_14: tmp_11 [1/1] 1.88ns
.preheader71:3  %tmp_11 = icmp slt i4 %x2_cast, %O_read

ST_14: empty_18 [1/1] 0.00ns
.preheader71:4  %empty_18 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 3, i64 5, i64 0)

ST_14: x_2 [1/1] 0.80ns
.preheader71:5  %x_2 = add i3 %x2, 1

ST_14: stg_152 [1/1] 1.57ns
.preheader71:6  br i1 %tmp_11, label %.preheader, label %.preheader72


 <State 15>: 5.45ns
ST_15: y3 [1/1] 0.00ns
.preheader:0  %y3 = phi i3 [ %y_2, %4 ], [ 0, %.preheader71 ]

ST_15: phi_mul9 [1/1] 0.00ns
.preheader:1  %phi_mul9 = phi i7 [ %next_mul2, %4 ], [ 0, %.preheader71 ]

ST_15: y3_cast [1/1] 0.00ns
.preheader:2  %y3_cast = zext i3 %y3 to i4

ST_15: exitcond [1/1] 1.88ns
.preheader:3  %exitcond = icmp eq i4 %y3_cast, %O_read

ST_15: empty_19 [1/1] 0.00ns
.preheader:4  %empty_19 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 3, i64 5, i64 0)

ST_15: y_2 [1/1] 0.80ns
.preheader:5  %y_2 = add i3 %y3, 1

ST_15: stg_159 [1/1] 0.00ns
.preheader:6  br i1 %exitcond, label %.preheader71, label %4

ST_15: next_mul2 [1/1] 1.72ns
:0  %next_mul2 = add i7 %O_cast4, %phi_mul9

ST_15: tmp_16_cast [1/1] 0.00ns
:1  %tmp_16_cast = zext i7 %phi_mul9 to i11

ST_15: tmp7 [1/1] 1.37ns
:2  %tmp7 = add i11 %tmp_16_cast, %phi_mul1

ST_15: index [1/1] 1.37ns
:3  %index = add i11 %x2_cast9, %tmp7

ST_15: tmp_14 [1/1] 0.00ns
:4  %tmp_14 = zext i11 %index to i64

ST_15: output_V_addr_1 [1/1] 0.00ns
:5  %output_V_addr_1 = getelementptr [800 x i16]* %output_V, i64 0, i64 %tmp_14

ST_15: p_Val2_s [2/2] 2.71ns
:6  %p_Val2_s = load i16* %output_V_addr_1, align 2

ST_15: p_Val2_1 [2/2] 2.71ns
:7  %p_Val2_1 = load i16* %bias_V_addr, align 2


 <State 16>: 8.32ns
ST_16: p_Val2_s [1/2] 2.71ns
:6  %p_Val2_s = load i16* %output_V_addr_1, align 2

ST_16: p_Val2_1 [1/2] 2.71ns
:7  %p_Val2_1 = load i16* %bias_V_addr, align 2

ST_16: p_Val2_2 [1/1] 1.96ns
:8  %p_Val2_2 = add i16 %p_Val2_1, %p_Val2_s

ST_16: tmp_15 [1/1] 0.00ns
:9  %tmp_15 = trunc i16 %p_Val2_2 to i15

ST_16: tmp_16 [1/1] 2.28ns
:10  %tmp_16 = icmp sgt i16 %p_Val2_2, 0

ST_16: p_s [1/1] 1.37ns
:11  %p_s = select i1 %tmp_16, i15 %tmp_15, i15 0


 <State 17>: 2.71ns
ST_17: p_cast [1/1] 0.00ns
:12  %p_cast = zext i15 %p_s to i16

ST_17: stg_175 [1/1] 2.71ns
:13  store i16 %p_cast, i16* %output_V_addr_1, align 2

ST_17: stg_176 [1/1] 0.00ns
:14  br label %.preheader



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 12>: 9.09ns
The critical path consists of the following:
	'mul' operation ('p_Val2_4', layer.cpp:42) (3.36 ns)
	'add' operation ('__Val2__', layer.cpp:42) (3.02 ns)
	'partselect' operation ('tmp_21', layer.cpp:42) (0 ns)
	'store' operation (layer.cpp:42) of variable 'tmp_21', layer.cpp:42 on array 'output_V' (2.71 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
